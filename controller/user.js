const {models:{User,Address}, models} = require('../model');
const bcrypt = require('bcrypt');
const passport = require('passport')
const jwt = require('jsonwebtoken')
const dotenv = require('dotenv').config();
const transporter = require('../utils/nodeMailer')


const registerwithpassport = async(req,res,next)=>{
    try {
        const password = req.body.password;
        const confirmpassword =  req.body.confirmpassword;
        if(password===confirmpassword){
            const salt = await bcrypt.genSalt();
            const hashedpass = await bcrypt.hash(password,salt);
            
            const data = await User.create({
            firstname:req.body.firstname,
            lastname:req.body.lastname,
            username:req.body.username,
            email:req.body.email,
            password:hashedpass,
            confirmpassword:hashedpass
        })
        res.status(201).json({
            message:"data saved",
            data:data
        })
        
    }
    else{
        res.status(401).json({
            message:"password does not matched"
        })
    }
    } catch (error) {
        console.log(error)
        res.status(500).json({
            error:error
        })
    }
};


const loginwithpassport = async(req,res)=>{
    try {
        passport.authenticate('local')
        const user = req.user //geting data of user here //from passport
        const userid = user.id;
        const useremail = user.email
        
        let token = jwt.sign({ userid, useremail }, process.env.JWT_ACCESS_TOKEN, { expiresIn: process.env.EXPIRY })
       
        res.header('jwt', token);

        res.status(201).json({
            message: "user found and token generated..."
        })
    } catch (error) {
        console.log(error);
        res.status(403).json({
            message: error.message
        })
    }
}

const getuser = async(req,res)=>{
    try {
        const userid  = req.userid;
        const useremail = req.email
        const data = await User.findOne({where:{id:userid}});
        if(data == null){res.status(403).json({message:"user not found"})}
        else{
            res.status(200).json({message:"user found",
        data:data
        })
        }
    } catch (error) {
        console.log(error);
        res.status(500).json({message:error})
    }
};


const deleteuser = async (req, res) => {
    let userid = req.userid;
console.log(userid)
    try {
        await User.findByPk(userid).then((deleted)=>{
            if(!deleted){res.status(403).json({message:"user not found"})}
            
                User.destroy({where:{id:userid}})
            
        })  
        .then(()=>{
            // AccessToken.destroy({where:{userid:userid}}) // this will also delete the token generated by the id
            res.status(200).json({message:"data deleted"})
        })

    } catch (error) {
        res.status(500).json({ message: "Internal server error" })
        console.log(error)
    }

};

const pagination = async(req,res)=>{
    let page = req.params.page;
    let size = 10;
    if(!page){
        page=1
    }
    try {
         let limit = size;
        let skip = (size*page)-size;
        const user = await User.findAll({attributes:['firstname','lastname','email','username'],limit:limit,offset:skip})
            res.status(200).json({
                page: page,
                size: size,
                users: user
            });

    } catch (error) {
        console.log(error)
        res.status(500).json({message:"error"})
    }
}
const address = async(req,res)=>{
    try {
        const userid = req.userid;
        const useraddress = await Address.create({
            userid:userid,
            city:req.body.city,
            state:req.body.state,
            pin:req.body.pin,
        })
        if(!useraddress){res.status(403).json({message:"somthng went wrong during saving"})};
        res.status(201).json({
            message:"address saved",
            useraddress:useraddress
        })
        
    } catch (error) {
        console.log(error);
        res.status(500).json({message:"Internal server error"})
    }

}
const deleteaddress = async(req,res)=>{
    try {
        const userid= req.userid;
    
        const array = req.body.array;   
            
        Address.destroy({where:{id:array}})
        res.status(201).json({
            message:"data deleted"
        })

    }
     catch (error) {
        res.status(500).json({
            error:error
        })
    }
};


const userwithaddress = async(req,res)=>{
    try {  
        try {
            console.log('am here')
            let userdata = await User.findAll({
                include:[{
                  model:Address,
                  as:'address'
                }],     
                where:{id:1}
              });
              console.log(userdata)
        } catch (error) {
            console.log(error)     
        }
        console.log(userdetail)
        if (!userdetail) {
            res.status(403).json({ message: "User not found" });
        }
        res.status(200).json({
            useraddress: userdetail
        })
    } catch (error) {
        res.status(500).json({
            message:"Internal server error"
        })
    }
}


const fgproute = async(req,res)=>{
    const userid = req.userid;
    const userdetail = await User.findOne({where:{id:userid}});
    const hashedpassword = userdetail.password
    if(!userid){
        res.status(404).json({message:"User Not Found please check your email"})
    }else{
        try {   
            const tokenforreset =  jwt.sign({hashedpassword},process.env.JWT_ACCESS_TOKEN_FOR_PASSWORD,{expiresIn:process.env.PASSWORD_EXPIRY})
            var mailOptions = {
                from: process.env.SENDINGMAIL,
                to: userdetail.email,
                subject: 'reset password link',
                text: `localhost:8000/user/verify-reset-password/${tokenforreset}`
              };
              transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                  console.log(error);
                } else {
                  console.log('Email sent: ' + info.response);
                }   
              });
            res.status(201).json({
                message:"A mail with link sent to your mail Id please check",
                request:{
                    type:'PUT',
                    url:`localhost:8000/user/verify-reset-password/${tokenforreset}`
                }
            })
        } catch (error) {
            console.log(error)
            res.status(500).json({
                message:"something went wrong error while generating jwt token"
            })
        }
    }
}



const verifypasswordreset = async(req,res,next)=>{
    const userid = req.userid;

    const tokenfromurl = req.params.passwordreset;
    try {  
        const checktokenwithjwt = jwt.verify(tokenfromurl,process.env.JWT_ACCESS_TOKEN_FOR_PASSWORD)
            const password = req.body.password;
            const confirmpassword = req.body.confirmpassword
            if(password ===confirmpassword){
                
                const hashedpassword = await bcrypt.hash(password,10)
                
                const updatedpassword = await User.update({password:hashedpassword,confirmpassword:hashedpassword},{where:{id:userid}})
                var mailOptions = {
                    from: process.env.SENDINGMAIL,
                    to: useremail,
                    subject: 'your password reset successfull',
                    text: `please login now`
                };
                  transporter.sendMail(mailOptions, function(error, info){
                    if (error) {
                        console.log(error);
                    } else {
                        console.log('Email sent: ' + info.response);
                    }   
                });
                res.status(201).json({
                    "message":"password changed and saved successfully"
                })
    
            }else{
                res.status(401).json({
                    message:"password does not matched"
                })
            }
    } catch (error) {
        res.status(500).json({error:error})
    }
}   
module.exports = {
    registerwithpassport,
    loginwithpassport,
    getuser,
    deleteuser,
    pagination,
    address,
    deleteaddress,
    fgproute,
    verifypasswordreset,
    userwithaddress
};